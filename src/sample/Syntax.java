
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\005\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\011\000\002\004\011\000\002\015\006\000\002\015\007" +
    "\000\002\015\010\000\002\015\005\000\002\006\011\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\013\007\000\002\007" +
    "\015\000\002\010\011\000\002\011\013\000\002\012\011" +
    "\000\002\014\012\000\002\014\011\000\002\005\005\000" +
    "\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\007\006\036\004\001\002\000\004\030" +
    "\225\001\002\000\004\002\224\001\002\000\004\036\007" +
    "\001\002\000\004\030\010\001\002\000\004\031\011\001" +
    "\002\000\004\032\012\001\002\000\020\006\021\007\024" +
    "\010\020\011\015\014\016\015\026\040\030\001\002\000" +
    "\024\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\033\ufff7\040\ufff7\001\002\000\024\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\033\ufff4" +
    "\040\ufff4\001\002\000\004\030\212\001\002\000\004\030" +
    "\204\001\002\000\024\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\033\ufffd\040\ufffd\001\002\000" +
    "\004\040\165\001\002\000\006\026\150\040\151\001\002" +
    "\000\024\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\033\ufff9\040\ufff9\001\002\000\024\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\033" +
    "\ufffb\040\ufffb\001\002\000\006\026\133\040\134\001\002" +
    "\000\024\006\021\007\024\010\020\011\015\013\114\014" +
    "\016\015\026\033\132\040\030\001\002\000\004\030\044" +
    "\001\002\000\024\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\033\ufff2\040\ufff2\001\002\000\006" +
    "\016\032\026\031\001\002\000\004\037\043\001\002\000" +
    "\006\005\034\041\033\001\002\000\004\037\042\001\002" +
    "\000\006\005\035\040\036\001\002\000\004\037\041\001" +
    "\002\000\004\005\037\001\002\000\004\037\040\001\002" +
    "\000\024\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\033\uffe1\040\uffe1\001\002\000\024\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\033" +
    "\uffe2\040\uffe2\001\002\000\024\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\015\uffe3\033\uffe3\040\uffe3\001" +
    "\002\000\024\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\033\uffe0\040\uffe0\001\002\000\006\006" +
    "\046\040\047\001\002\000\004\031\105\001\002\000\004" +
    "\040\076\001\002\000\004\016\050\001\002\000\004\041" +
    "\051\001\002\000\004\037\052\001\002\000\006\027\054" +
    "\040\055\001\002\000\004\037\066\001\002\000\006\031" +
    "\uffde\037\uffde\001\002\000\004\024\056\001\002\000\012" +
    "\005\060\027\061\040\062\041\057\001\002\000\006\031" +
    "\uffdc\037\uffdc\001\002\000\006\005\063\040\064\001\002" +
    "\000\006\031\uffdd\037\uffdd\001\002\000\006\031\uffdb\037" +
    "\uffdb\001\002\000\006\031\uffda\037\uffda\001\002\000\004" +
    "\005\065\001\002\000\006\031\uffd9\037\uffd9\001\002\000" +
    "\006\026\071\040\070\001\002\000\004\031\uffd3\001\002" +
    "\000\006\025\073\026\074\001\002\000\004\040\072\001" +
    "\002\000\004\031\uffd0\001\002\000\004\041\075\001\002" +
    "\000\004\031\uffd1\001\002\000\004\031\uffd2\001\002\000" +
    "\004\016\077\001\002\000\004\041\100\001\002\000\004" +
    "\037\101\001\002\000\006\027\054\040\055\001\002\000" +
    "\004\037\103\001\002\000\006\026\071\040\070\001\002" +
    "\000\004\031\uffd4\001\002\000\004\032\106\001\002\000" +
    "\020\006\021\007\024\010\020\011\015\014\016\015\026" +
    "\040\030\001\002\000\024\006\021\007\024\010\020\011" +
    "\015\013\114\014\016\015\026\033\116\040\030\001\002" +
    "\000\024\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\033\ufff8\040\ufff8\001\002\000\024\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\033" +
    "\ufff5\040\ufff5\001\002\000\024\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\013\ufffe\014\ufffe\015\ufffe\033\ufffe\040\ufffe\001" +
    "\002\000\024\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\033\ufffa\040\ufffa\001\002\000\004\032" +
    "\122\001\002\000\024\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\033\ufffc\040\ufffc\001\002\000" +
    "\024\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\033\uffd5\040\uffd5\001\002\000\024\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\033\ufff3" +
    "\040\ufff3\001\002\000\004\013\114\001\002\000\024\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\033\ufff6\040\ufff6\001\002\000\020\006\021\007\024\010" +
    "\020\011\015\014\016\015\026\040\030\001\002\000\024" +
    "\006\021\007\024\010\020\011\015\013\114\014\016\015" +
    "\026\033\124\040\030\001\002\000\004\014\125\001\002" +
    "\000\004\030\126\001\002\000\006\027\054\040\055\001" +
    "\002\000\004\031\130\001\002\000\004\037\131\001\002" +
    "\000\024\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\033\uffd6\040\uffd6\001\002\000\004\002\000" +
    "\001\002\000\004\040\146\001\002\000\012\016\140\025" +
    "\135\026\137\037\136\001\002\000\004\041\144\001\002" +
    "\000\024\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\033\ufff1\040\ufff1\001\002\000\004\037\143" +
    "\001\002\000\004\041\141\001\002\000\004\037\142\001" +
    "\002\000\024\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef" +
    "\014\uffef\015\uffef\033\uffef\040\uffef\001\002\000\024\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\015\uffee" +
    "\033\uffee\040\uffee\001\002\000\004\037\145\001\002\000" +
    "\024\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\033\ufff0\040\ufff0\001\002\000\004\037\147\001" +
    "\002\000\024\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\033\uffed\040\uffed\001\002\000\004\040" +
    "\163\001\002\000\012\016\155\025\152\026\154\037\153" +
    "\001\002\000\004\041\161\001\002\000\024\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec\033\uffec" +
    "\040\uffec\001\002\000\004\037\160\001\002\000\004\041" +
    "\156\001\002\000\004\037\157\001\002\000\024\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea\033" +
    "\uffea\040\uffea\001\002\000\024\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\015\uffe9\033\uffe9\040\uffe9\001" +
    "\002\000\004\037\162\001\002\000\024\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\033\uffeb\040" +
    "\uffeb\001\002\000\004\037\164\001\002\000\024\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\033" +
    "\uffe8\040\uffe8\001\002\000\006\016\167\025\166\001\002" +
    "\000\004\005\176\001\002\000\004\005\170\001\002\000" +
    "\006\005\171\040\172\001\002\000\004\037\175\001\002" +
    "\000\004\005\173\001\002\000\004\037\174\001\002\000" +
    "\024\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\033\uffe4\040\uffe4\001\002\000\024\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\033\uffe6" +
    "\040\uffe6\001\002\000\006\005\177\040\200\001\002\000" +
    "\004\037\203\001\002\000\004\005\201\001\002\000\004" +
    "\037\202\001\002\000\024\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\033\uffe5\040\uffe5\001\002" +
    "\000\024\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\033\uffe7\040\uffe7\001\002\000\006\027\054" +
    "\040\055\001\002\000\004\031\206\001\002\000\004\032" +
    "\207\001\002\000\020\006\021\007\024\010\020\011\015" +
    "\014\016\015\026\040\030\001\002\000\024\006\021\007" +
    "\024\010\020\011\015\013\114\014\016\015\026\033\211" +
    "\040\030\001\002\000\024\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\033\uffd7\040\uffd7\001\002" +
    "\000\006\027\054\040\055\001\002\000\004\031\214\001" +
    "\002\000\004\032\215\001\002\000\020\006\021\007\024" +
    "\010\020\011\015\014\016\015\026\040\030\001\002\000" +
    "\024\006\021\007\024\010\020\011\015\013\114\014\016" +
    "\015\026\033\217\040\030\001\002\000\026\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\220\013\uffdf\014\uffdf\015\uffdf" +
    "\033\uffdf\040\uffdf\001\002\000\004\032\221\001\002\000" +
    "\020\006\021\007\024\010\020\011\015\014\016\015\026" +
    "\040\030\001\002\000\024\006\021\007\024\010\020\011" +
    "\015\013\114\014\016\015\026\033\223\040\030\001\002" +
    "\000\024\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\033\uffd8\040\uffd8\001\002\000\004\002\001" +
    "\001\002\000\004\031\226\001\002\000\004\032\227\001" +
    "\002\000\020\006\021\007\024\010\020\011\015\014\016" +
    "\015\026\040\030\001\002\000\024\006\021\007\024\010" +
    "\020\011\015\013\114\014\016\015\026\033\231\040\030" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\024\004\016\006" +
    "\022\007\021\010\012\012\013\015\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\111\006\114\007\112\010\107\011\117\012\110" +
    "\015\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\101\001\001\000\002\001\001\000\004\005" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\106\004\016\006\022\007\021\010\012\012\013\015" +
    "\026\001\001\000\020\004\111\006\114\007\112\010\107" +
    "\011\117\012\110\015\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\120\001\001\000\002\001\001\000\020" +
    "\003\122\004\016\006\022\007\021\010\012\012\013\015" +
    "\026\001\001\000\020\004\111\006\114\007\112\010\107" +
    "\011\117\012\110\015\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\207\004" +
    "\016\006\022\007\021\010\012\012\013\015\026\001\001" +
    "\000\020\004\111\006\114\007\112\010\107\011\117\012" +
    "\110\015\116\001\001\000\002\001\001\000\004\013\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\215\004\016\006\022\007\021\010\012\012\013\015\026" +
    "\001\001\000\020\004\111\006\114\007\112\010\107\011" +
    "\117\012\110\015\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\221\004\016\006\022\007\021\010" +
    "\012\012\013\015\026\001\001\000\020\004\111\006\114" +
    "\007\112\010\107\011\117\012\110\015\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\227\004\016\006\022\007\021\010" +
    "\012\012\013\015\026\001\001\000\020\004\111\006\114" +
    "\007\112\010\107\011\117\012\110\015\116\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA ASIGNACION_VALOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ASIGNACION_VALOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION_VALOR ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VALOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION_VALOR ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VALOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION_VALOR ::= Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VALOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION_VALOR ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VALOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
